import os
import requests
import asyncio
import time
from dotenv import load_dotenv
from telegram import Bot
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class TwitchTokenManager:
    def __init__(self):
        self.client_id = os.getenv('TWITCH_CLIENT_ID')
        self.client_secret = os.getenv('TWITCH_CLIENT_SECRET')
        self.refresh_token = os.getenv('TWITCH_REFRESH_TOKEN')
        self.access_token = None
        self.token_expires_at = 0

    async def get_access_token(self):
        if self.access_token and time.time() < self.token_expires_at:
            return self.access_token

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        url = "https://id.twitch.tv/oauth2/token"
        params = {
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "grant_type": "refresh_token",
            "refresh_token": self.refresh_token
        }

        try:
            response = requests.post(url, params=params)
            response.raise_for_status()
            data = response.json()

            self.access_token = data['access_token']
            self.refresh_token = data.get('refresh_token', self.refresh_token)
            self.token_expires_at = time.time() + data['expires_in'] - 60  # –ó–∞–ø–∞—Å 60 —Å–µ–∫—É–Ω–¥: E501

            # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º refresh token
            if 'refresh_token' in data:
                self._update_env_file(data['refresh_token'])

            return self.access_token
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            await send_telegram_message(
                os.getenv('TELEGRAM_ADMIN_CHAT_ID'),
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}"
                )
            return None

    def _update_env_file(self, new_refresh_token):
        with open('.env', 'r') as f:
            lines = f.readlines()

        with open('.env', 'w') as f:
            for line in lines:
                if line.startswith('TWITCH_REFRESH_TOKEN='):
                    f.write(f'TWITCH_REFRESH_TOKEN={new_refresh_token}\n')
                else:
                    f.write(line)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
token_manager = TwitchTokenManager()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_GROUP_CHAT_ID = os.getenv('TELEGRAM_GROUP_CHAT_ID')
TELEGRAM_ADMIN_CHAT_ID = os.getenv('TELEGRAM_ADMIN_CHAT_ID')
TWITCH_CHANNEL = os.getenv('TWITCH_CHANNEL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = Bot(token=TELEGRAM_TOKEN)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∏–º–∞
stream_is_live = False


async def check_twitch_stream():
    global stream_is_live

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Access Token
        access_token = await token_manager.get_access_token()
        if not access_token:
            await send_telegram_message(
                TELEGRAM_ADMIN_CHAT_ID,
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Twitch —Ç–æ–∫–µ–Ω"
                )
            return

        # –ó–∞–ø—Ä–æ—Å –∫ Twitch API
        url = "https://api.twitch.tv/helix/streams"
        headers = {
            "Client-ID": token_manager.client_id,
            "Authorization": f"Bearer {access_token}"
        }
        params = {"user_login": TWITCH_CHANNEL}

        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        if data['data']:  # –°—Ç—Ä–∏–º –∞–∫—Ç–∏–≤–µ–Ω
            if not stream_is_live:  # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª—Å—è
                stream_data = data['data'][0]
                message = (
                    f"üéÆ <b>{TWITCH_CHANNEL}</b> –Ω–∞—á–∞–ª —Å—Ç—Ä–∏–º!\n"
                    f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{stream_data['title']}</i>\n"
                    f"üïπ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>{stream_data['game_name']}</i>\n"
                    f"üîó <b>–°—Å—ã–ª–∫–∞:</b> https://twitch.tv/{TWITCH_CHANNEL}\n"
                    f"<u>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º</u>"
                )

                await send_telegram_message(TELEGRAM_GROUP_CHAT_ID, message)
                print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                stream_is_live = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:  # –°—Ç—Ä–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω*
            if stream_is_live:  # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                print("–°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
                stream_is_live = False  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–∞: {e}")
        await send_telegram_message(
            TELEGRAM_ADMIN_CHAT_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–∞: {str(e)}"
            )


async def send_telegram_message(chat_id, message):
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=False
        )
    except TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    while True:
        await check_twitch_stream()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    asyncio.run(main())
